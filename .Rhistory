x <- 2
hist(rnorm(100))
hist(runif(100))
help(rnorm)
y <- list(x = 6, y = 3)
y
library(dplyr)
source('hpca.r')
drop_suffix()
rm(list=ls())
drop_suffix()
source('hpca.r')
# Define items to conduct analysis on
items <- c('att', 'past', 'fut', 'self', 'ppl', 'arou', 'mvmt', 'ling', 'aff')
# Define file path or import the data directly
file <- 'mweeg_es.csv'
# Run the analysis
# Note, groups are not currently in order of similarity
hpca <- HPCA(file=file, items=items)
data <- read.csv('mweeg_es.csv')
head(d)
head(data)
# Run the analysis
# Note, groups are not currently in order of similarity
hpca <- HPCA(file=file, data=data)
# Run the analysis
# Note, groups are not currently in order of similarity
hpca <- HPCA(data=data, items=items)
# Run the analysis
# Note, groups are not currently in order of similarity
hpca <- HPCA(data=file, items=items)
# Define file path or import the data directly
f <- 'mweeg_es.csv'
d <- read.csv('mweeg_es.csv')
f
# Run the analysis
# Note, groups are not currently in order of similarity
hpca <- HPCA(file='mweeg_es.csv', items=items)
str(hpca, max.level = 1)
hpca$pcas[[1]]
hpca$distances
source("~/Dropbox/post_doc/professional/projects/independent/hpca/hpca.r")
# Determine ideal number of groups
groups <- get_ideal_groups(hpca)
groups
# Visualize dendrogram and wordcloud (by group)
plot_dendro(hpca, groups)
# if you get the error 'invalid graphics state', try running: dev.off()
plot_wordcloud(hpca, groups)
# Visualize dendrogram and wordcloud (by group)
plot_dendro(hpca, 4)
# if you get the error 'invalid graphics state', try running: dev.off()
plot_wordcloud(hpca, 4)
q()
source('hpca.r')
# ~~~ RUN HIERARCHICAL PCA ~~~ #
# Define items to conduct analysis on
items <- c('att', 'past', 'fut', 'self', 'ppl', 'arou', 'mvmt', 'ling', 'aff')
# Define file path or import the data directly
f <- 'mweeg_es.csv'
d <- read.csv('mweeg_es.csv')
head(d)
id <- 'subject'
Nfactors <- 4
data <- d
# Read in data from file if no data is provided
if (is.null(data) & is.null(file)) stop('Need to specify data or input path (file).')
if (is.null(data)) data <- read.csv(file)
d <- data
rm(data)
# Keep only relevant data
exact_match <- colnames(d) %in% items
response_match <- colnames(d) %in% paste0(items, '_response')
id_match <- colnames(d) == id
col_match <- exact_match | response_match | id_match
d <- d[, col_match]
d <- drop_suffix(d)
# Normalize within subject
d <- normalize_subject_item(d)
# Split by subject
d_split <- split(d, paste0('subject', d$subject))
pcas <- lapply(d_split, pca_subjects, Nfactors=Nfactors)
pccas
pcas
head(d)
subd <- d[d$subject==1,]
subject <- unique(subd$subject)
pca_data <- subd[, ! colnames(subd) %in% c('subject', 'subject_idx')]
head(pca_data)
pca_result <- psych::principal(pca_data, nfactors = Nfactors, rotate='varimax')
pca_result
str(pca$result)
str(pca_result)
head(subd)
nrow(subd)
pca_subjects <- function(subd, Nfactors) {
# See here for how to actually derive a varimax rotation matrix
# https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r
# Using the psych package below
subject <- unique(subd$subject)
pca_data <- subd[, ! colnames(subd) %in% c('subject', 'subject_idx')]
if (0 %in% apply(pca_data, MARGIN=2, FUN=function(x) var(x))) {
return(NULL)
}
pca_result <- psych::principal(pca_data, nfactors = Nfactors, rotate='varimax')
loadings <- matrix(pca_result$loadings, ncol=Nfactors)
rownames(loadings) <- rownames(pca_result$loadings)
colnames(loadings) <- paste0('PC', 1:(ncol(loadings)))
eigens <- pca_result$Vaccounted['Proportion Explained',]
scores <- pca_result$scores
out <- list(
'rotations' = loadings,
'eigens' = eigens,
'scores' = scores
)
return(out)
}
pcas <- lapply(d_split, pca_subjects, Nfactors=Nfactors)
pcas <- Filter(negate(is.null), pcas)
subject_mapping <- get_subject_numbers(names(pcas))
pcas
pca_subjects <- function(subd, Nfactors) {
# See here for how to actually derive a varimax rotation matrix
# https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r
# Using the psych package below
subject <- unique(subd$subject)
pca_data <- subd[, ! colnames(subd) %in% c('subject', 'subject_idx')]
if (0 %in% apply(pca_data, MARGIN=2, FUN=function(x) var(x))) {
return(NULL)
}
pca_result <- psych::principal(pca_data, nfactors = Nfactors, rotate='varimax')
loadings <- matrix(pca_result$loadings, ncol=Nfactors)
rownames(loadings) <- rownames(pca_result$loadings)
colnames(loadings) <- paste0('PC', 1:(ncol(loadings)))
eigens <- pca_result$Vaccounted['Proportion Explained',]
scores <- pca_result$scores
colnames(scores) <- paste0('PC', 1:(ncol(scores)))
out <- list(
'rotations' = loadings,
'eigens' = eigens,
'scores' = scores
)
return(out)
}
# Get subject-level PCAs
pcas <- lapply(d_split, pca_subjects, Nfactors=Nfactors)
pcas <- Filter(negate(is.null), pcas)
subject_mapping <- get_subject_numbers(names(pcas))
pcas
# Run the analysis
# Note, groups are not currently in order of similarity
hpca <- HPCA(file='mweeg_es.csv', items=items)
source('hpca.r')
# Run the analysis
# Note, groups are not currently in order of similarity
hpca <- HPCA(file='mweeg_es.csv', items=items)
hpca$pcas
names(hpca$pcas)
help("str_extract")
subject_str <- names(hpca$pcas)[1]
subject_str
subject <- str_extract(subject_str, 'subject(\\d+)', group = 1)
subject
pca <- pcas[[subject_str]]
pcas
pcas
pcas[['subject8']]
subject_str
names(pcas)
pcas[[subject_str]]
pca <- pcas[[subject_str]]
nrow(pca$scores)
vec <- ifelse(type == 'rotation', rownames(pca$rotations), 1:(nrow(pca$scores)))
type <- 'rotation'
vec <- ifelse(type == 'rotation', rownames(pca$rotations), 1:(nrow(pca$scores)))
vec
rownames(pca$rotations)
vec <- ifelse(type == 'rotation', rownames(pca$rotations), 1:(nrow(pca$scores)))
vec
if (type == 'rotation') {
vec <- rownames(pca$rotations)
} else {
vec <- 1:(nrow(pca$scores))
}
vec
if (type == 'rotation') {
append <- pca$rotations
rownames(append) <- 1:(nrow(append))
vec <- rownames(pca$rotations)
} else {
append <- pca$scores
vec <- 1:(nrow(pca$scores))
}
append
out <- cbind(data.frame(subject=subject), append)
out
out[[name]] <- vec
name <- ifelse(type == 'rotation', 'item', 'trial')
out[[name]] <- vec
out
out <- out[,c('subject', name, colnames(append))]
out
pca_to_df <- function(subject_str, pcas, type) {
# type must be 'rotation' or 'scores'
subject <- as.numeric(str_extract(subject_str, 'subject(\\d+)', group = 1))
pca <- pcas[[subject_str]]
name <- ifelse(type == 'rotation', 'item', 'trial')
if (type == 'rotation') {
append <- pca$rotations
rownames(append) <- 1:(nrow(append))
vec <- rownames(pca$rotations)
} else {
append <- pca$scores
vec <- 1:(nrow(pca$scores))
}
out <- cbind(data.frame(subject=subject), append)
out[[name]] <- vec
out <- out[,c('subject', name, colnames(append))]
return(out)
}
rotation <- do.call(rbind, lapply(names(pcas), pca_to_df, pcas, 'rotation'))
head(rotation)
tail(rotation)
rotation
rotation <- rotation[order(rotation$subject),]
head(rotation)
tail(rotation)
scores <- do.call(rbind, lapply(names(pcas), pca_to_df, pcas, 'scores'))
scores <- scores[order(scores$subject),]
head(scores)
View(scores)
View(rotations)
View(rotation)
library(fs)
library(fs)
help(write.csv)
write_pcas <- function(hpca, out_path=NULL) {
# default to write in working dir
# Convert to df
pcas <- hpca$pcas
rotation <- do.call(rbind, lapply(names(pcas), pca_to_df, pcas, 'rotation'))
rotation <- rotation[order(rotation$subject),]
scores <- do.call(rbind, lapply(names(pcas), pca_to_df, pcas, 'scores'))
scores <- scores[order(scores$subject),]
# Write
if (!is.null(out_path)) {
if (!dir.exists(out_path)) stop('Supplied output path must exist')
out_path <- path(out_path)
} else {
out_path <- path('./')
}
write.csv(rotation, path(out_path, 'rotation.csv'), row.names=FALSE)
write.csv(scores, path(out_path, 'scores.csv'), row.names=FALSE)
}
write_pcas(hpca)
q()
write_pcas <- function(hpca, out_path=NULL) {
#' Write PCA Loadings and Scores to CSV Files
#'
#' This function extracts PCA rotations and scores from the hierarchical PCA (HPCA) output and writes them
#' to separate CSV files. The output includes a rotation file containing the PCA loadings for each item
#' and a scores file with PCA scores for each subject.
#'
#' @param hpca list
#'   The output from the `HPCA` function, containing PCA results for individual subjects.
#' @param out_path character, optional
#'   Directory path to save the output files. Defaults to the working directory (`./`).
#'
#' @details
#' The function writes two files:
#' \itemize{
#'   \item \code{rotation.csv}: Contains the PCA loadings (rotations) for each item and subject.
#'   \item \code{scores.csv}: Contains the PCA scores for each subject and component.
#' }
#' The files are saved in the specified output directory. If the directory does not exist, the function
#' raises an error.
#'
#' @return None. Writes files to the specified or default directory.
#'
#' @examples
#' # Assuming `hpca_result` is the output from the `HPCA` function:
#' write_pcas(hpca_result, out_path = "./results")
#' # Files `rotation.csv` and `scores.csv` will be saved in the "./results" directory.
#'
#' @note
#' Ensure the `out_path` exists before calling this function, as it will not create the directory.
#'
#' @throws
#' An error is raised if the provided output path does not exist.
#'
#' @seealso HPCA
# Convert to df
pcas <- hpca$pcas
rotation <- do.call(rbind, lapply(names(pcas), pca_to_df, pcas, 'rotation'))
rotation <- rotation[order(rotation$subject),]
scores <- do.call(rbind, lapply(names(pcas), pca_to_df, pcas, 'scores'))
scores <- scores[order(scores$subject),]
# Write
if (!is.null(out_path)) {
if (!dir.exists(out_path)) stop('Supplied output path must exist')
out_path <- path(out_path)
} else {
out_path <- path('./')
}
write.csv(rotation, path(out_path, 'rotation.csv'), row.names=FALSE)
write.csv(scores, path(out_path, 'scores.csv'), row.names=FALSE)
}
source('hpca.r')
# ~~~ RUN HIERARCHICAL PCA ~~~ #
# Define items to conduct analysis on
items <- c('att', 'past', 'fut', 'self', 'ppl', 'arou', 'mvmt', 'ling', 'aff')
# Define file path or import the data directly
f <- 'mweeg_es.csv'
d <- read.csv('mweeg_es.csv')
# Run the analysis
# Note, groups are not currently in order of similarity
hpca <- HPCA(file='mweeg_es.csv', items=items)
# Save subject-level PCA rotations and scores to file
# Specify custom out_path if you want
# path <- 'my/output_dir'
write_pcas(hpca, out_path=NULL)
q()
